diff -xsftp-config.json -uNr kernel.old/.config kernel/.config
--- kernel.old/.config	2020-04-27 15:42:59.000000000 -0700
+++ kernel/.config	2020-04-28 18:00:12.000000000 -0700
@@ -4479,3 +4479,4 @@
 CONFIG_FONT_8x8=y
 CONFIG_FONT_8x16=y
 CONFIG_ARCH_HAS_SG_CHAIN=y
+CONFIG_DYNAMIC_DUMP_STACK=y
diff -xsftp-config.json -uNr kernel.old/arch/x86/syscalls/syscall_32.tbl kernel/arch/x86/syscalls/syscall_32.tbl
--- kernel.old/arch/x86/syscalls/syscall_32.tbl	2020-04-27 22:58:09.000000000 -0700
+++ kernel/arch/x86/syscalls/syscall_32.tbl	2020-05-06 17:49:01.000000000 -0700
@@ -365,3 +365,5 @@
 356	i386	memfd_create		sys_memfd_create
 357	i386	bpf			sys_bpf
 358	i386	execveat		sys_execveat			stub32_execveat
+359	i386	insdump			sys_insdump
+360	i386	rmdump			sys_close
diff -xsftp-config.json -uNr kernel.old/include/linux/dynamic_dump_stack.h kernel/include/linux/dynamic_dump_stack.h
--- kernel.old/include/linux/dynamic_dump_stack.h	1969-12-31 17:00:00.000000000 -0700
+++ kernel/include/linux/dynamic_dump_stack.h	2020-04-27 04:53:33.000000000 -0700
@@ -0,0 +1,6 @@
+#ifndef __DYNAMIC_DUMP_STACK_H__
+#define __DYNAMIC_DUMP_STACK_H__
+
+typedef unsigned int dumpmode_t;
+
+#endif
diff -xsftp-config.json -uNr kernel.old/lib/Kconfig.debug kernel/lib/Kconfig.debug
--- kernel.old/lib/Kconfig.debug	2020-04-27 22:58:09.000000000 -0700
+++ kernel/lib/Kconfig.debug	2020-04-27 22:29:13.000000000 -0700
@@ -1595,6 +1595,17 @@
 
 endmenu # runtime tests
 
+menu "kernel hacking"
+
+config DYNAMIC_DUMP_STACK
+	bool "Enable the dynamic dump stack"
+	default y
+	depends on DEBUG_KERNEL && KPROBES
+	help
+	  Selecting this option enables the system call of 'insdump' and 'rmdump'.
+
+endmenu # kernel hacking
+
 config PROVIDE_OHCI1394_DMA_INIT
 	bool "Remote debugging over FireWire early on boot"
 	depends on PCI && X86
diff -xsftp-config.json -uNr kernel.old/lib/Makefile kernel/lib/Makefile
--- kernel.old/lib/Makefile	2020-04-27 22:58:09.000000000 -0700
+++ kernel/lib/Makefile	2020-04-27 16:05:54.000000000 -0700
@@ -196,3 +196,5 @@
 clean-files	+= oid_registry_data.c
 
 obj-$(CONFIG_UCS2_STRING) += ucs2_string.o
+
+obj-y += dynamic_dump_stack.o
diff -xsftp-config.json -uNr kernel.old/lib/dynamic_dump_stack.c kernel/lib/dynamic_dump_stack.c
--- kernel.old/lib/dynamic_dump_stack.c	1969-12-31 17:00:00.000000000 -0700
+++ kernel/lib/dynamic_dump_stack.c	2020-05-07 17:15:51.000000000 -0700
@@ -0,0 +1,141 @@
+#include <linux/kernel.h>
+#include <linux/slab.h>
+
+#include <linux/kallsyms.h>
+#include <linux/anon_inodes.h>
+#include <linux/kprobes.h>
+
+#include <linux/syscalls.h>
+
+#include <linux/dynamic_dump_stack.h>
+
+#define ANON_INODE_NAME "dynamic_dump_stack"
+
+#ifndef CONFIG_DYNAMIC_DUMP_STACK
+SYSCALL_DEFINE2(insdump, const char __user *, symbolname, dumpmode_t, mode)
+{
+        return -ENOSYS;
+}
+#else
+
+typedef struct kprobe_list {
+        struct kprobe kp;                       /** Kprobe info */
+        pid_t owner;                            /** Owner PID */
+        pid_t parent;                           /** Owner's parent PID */
+        dumpmode_t mode;                        /** Dump mode */
+} kprobe_list_t;
+
+static void clean_up(struct kprobe_list *p) {
+        printk(KERN_INFO "Removing kprobe at %p\n", p->kp.addr);
+        unregister_kprobe(&p->kp);
+        kfree(p);
+}
+
+static int dynamic_dump_stack_release(struct inode *, struct file *);
+static int dummy_flush(struct file *f, fl_owner_t id) {
+        printk(KERN_INFO "Flush? in open.c line 1067?\n");
+        return 0;
+}
+
+static struct file_operations fops = {
+        .owner = THIS_MODULE,
+        .release = dynamic_dump_stack_release,
+        .flush = dummy_flush,      
+};
+
+static int dynamic_dump_stack_release(struct inode *i, struct file *filp) {
+        kprobe_list_t *obj = (kprobe_list_t *)filp->private_data;
+
+        // Can't be close by non-owner.
+        // For light-weight process, we are sharing file descriptor.
+        // if (obj->pid != current) {
+        //         return -EPERM;
+        // }
+        clean_up(obj);
+        return 0;
+}
+
+/* kprobe pre_handler: called just before the probed instruction is executed */
+static int handler_pre(struct kprobe *p, struct pt_regs *regs)
+{
+        kprobe_list_t *node;
+
+        // printk(KERN_INFO "kprobe address: %p\n", p);
+        node = container_of(p, kprobe_list_t, kp);
+
+        if (node->mode == 0) {
+                // Check PID == current;
+                if (node->owner == current->pid)
+                        dump_stack();
+        } else if (node->mode == 1) {
+                // Check PID parent.
+                if (node->owner == current->pid ||
+                    (node->parent == current->tgid && 
+                     node->owner != current->tgid  && 
+                     node->parent != current->pid)) {
+                        dump_stack();
+                }
+        } else {
+                /* A dump_stack() here will give a stack backtrace */
+                dump_stack();
+        }
+        return 0;
+}
+
+static int do_insdump(const char *symbolname, dumpmode_t mode) {
+        int ret;
+        kprobe_list_t *obj;
+        unsigned long address;
+
+        printk(KERN_INFO "Symbol name: %s\n", symbolname);
+
+        address = kallsyms_lookup_name(symbolname);
+        if (!address) {
+                printk(KERN_ALERT "Invalid symbol name!\n");
+                return -EINVAL;
+        }
+
+        obj = kzalloc(sizeof(kprobe_list_t), GFP_KERNEL);
+        if (obj == NULL) {
+                return -ENOMEM;
+        }
+
+        obj->kp.pre_handler   = handler_pre;
+        obj->kp.addr = (kprobe_opcode_t *)address;
+        // Use the "offset" field of struct kprobe
+        // if the offset into the symbol to install
+        // a probepoint is known. This field is used
+        // to calculate the probepoint.
+        obj->kp.offset = 0x00;
+
+        ret = register_kprobe(&obj->kp);
+        if (ret < 0) {
+                printk(KERN_INFO "register_kprobe failed, returned %d\n", ret);
+                goto err_obj;
+        }
+        printk(KERN_INFO "Planted kprobe at %p\n", obj->kp.addr);
+
+        obj->mode = mode;
+        obj->owner = current->pid;
+        obj->parent = current->tgid;
+
+        ret = anon_inode_getfd(ANON_INODE_NAME, &fops, (void *)obj, O_CLOEXEC);
+        if (ret < 0) {
+                printk(KERN_INFO "anon_inode_getfd failed, ret:%d\n", ret);
+                unregister_kprobe(&obj->kp);
+                goto err_obj;
+        }
+
+        return ret;
+
+err_obj:
+        kfree(obj);
+        return ret;
+}
+
+SYSCALL_DEFINE2(insdump, const char __user *, symbolname, dumpmode_t, mode)
+{
+        /** Register kprobe based on the address getting from the user*/
+        return do_insdump(symbolname, mode);
+}
+#endif
